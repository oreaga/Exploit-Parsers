import time,urllib2
import stem, stem.connection
from stem import Signal
from stem.control import Controller

headers={'User-Agent':'Mozilla/5.0 (Windows NT 6.1; rv:52.0) Gecko/20100101 Firefox/53.0'}
timeTillRenewRetry = 2
torPw = 'torsucks'
filename = 'datFileBro.json'

def request(url):
    def _set_urlproxy():
        proxy_support = urllib2.ProxyHandler({"http" : "127.0.0.1:8118"})
        opener = urllib2.build_opener(proxy_support)
        urllib2.install_opener(opener)
    _set_urlproxy()
    request=urllib2.Request(url, None, headers)
    return urllib2.urlopen(request).read()

def maybe_renew_connection():
    with Controller.from_port(port = 9051) as controller:
        controller.authenticate(password = torPw)
        controller.signal(Signal.NEWNYM)
        controller.close()

def getIP():
    return request('http://icanhazip.com').strip()

def renew_connection():
    oldIP = getIP()
    maybe_renew_connection()
    newIP = getIP()
    while newIP == oldIP:
        time.sleep(timeTillRenewRetry)
        maybe_renew_connection()
        newIP = getIP()

def parse(zeroDayId,retrytimes): # MUST RETURN A DICT type to write it as JSON
    # parse the shit with the given ID by doing the right URL crafting
    # example code below !!!!!!!!!! CAUTION: 2COOL4U lel xd
    # you may copy the persistence part of this...
    '''
    self.extractedData = []
        target = self.target+str(id)
        if (retrytimes >= 5):
            return {'vdb-id': id, 'CVE-id': 'None', 'timeitems': -1, 'timeline': []}

        try:
            response = self.tor.requestURL(target)
        except Exception:
            self.tor.renew_session()
            self.parse(id,retrytimes+1)

        if response.status_code == 404:
            return {'vdb-id': id, 'CVE-id':'None','timeitems': -404, 'timeline': []}
        elif response.status_code != 200:
            self.tor.renew_connection()
            if(retrytimes < 5):
                self.parse(id,retrytimes+1)
            else:
                return {'vdb-id': id, 'CVE-id': 'None', 'timeitems': -1, 'timeline': []}

        soup = BeautifulSoup(response.text,"lxml")
        startpoint = soup.find('h2', {'id': 'timeline'})
        vulDBData = {}
        timeline = []
        try:
            while startpoint.get('id','noid') != 'sources':
                startpoint = startpoint.nextSibling
                date = self.getText(startpoint)
                startpoint = startpoint.nextSibling.nextSibling.nextSibling.nextSibling
                numDays = self.getText(startpoint)
                startpoint = startpoint.nextSibling.nextSibling
                if startpoint.text == '':
                    position = soup.text.find(startpoint.previousSibling.previousSibling.text)+len(startpoint.previousSibling.previousSibling.text)+1
                    desc = soup.text[position:position+30]
                    desc = desc[0:desc.find(self.getText(startpoint.nextSibling))]
                else:
                    desc = self.getText(startpoint)
                    startpoint = startpoint.nextSibling
                timeline.append([str(date),str(numDays),str(desc)])
        except Exception:
            pass
        cves = soup.find_all('a')
        cve = None
        for link in cves:
            if link['href'].find('cve.mitre.org') >= 0:
                cve = link['href']
                cve = cve[cve.find("?name=")+6:]
                break
        try:
            if cve[0:3] != "CVE":
                cve = 'None'
        except Exception:
            cve = 'None'
        vulDBData.__setitem__('vdb-id',id)
        vulDBData.__setitem__('CVE-id',str(cve))
        vulDBData.__setitem__('timeitems',len(timeline))
        vulDBData.__setitem__('timeline',timeline)
        return vulDBData
        '''
    pass


def scrape(startID,endID):
    f = open(filename, 'a+')
    for i in range(startID, endID):
        jsonString = json.dumps(parse(i,0))
        f.write(jsonString+"\n")
    f.close()

def testJSONfile():
    try:
        for l in open(filename, "r"):
            jsonString = json.loads(l)
        return True
    except Exception:
        return False
